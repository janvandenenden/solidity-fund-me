{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n//get funds from user\n// withdraw funds from contract, owner only\n// set a minimum funding value in USD\n\n//962864\n//940405 gas saved with applying constant\n//913386 gas saved with applying immutable\n\nimport \"./PriceConverter.sol\";\n\nerror FundMe__NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    address public immutable i_owner;\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress){\n        //msg.sender is whoever deploys the contract\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \"didn't send enough\");\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for(uint256 funderIndex = 0;funderIndex < funders.length ;funderIndex++){\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n\n        //resetting an array with with 0 objects\n        funders = new address[](0);\n        (bool callSuccess, ) = payable(msg.sender).call{value:address(this).balance}(\"\");\n        require(callSuccess, \"Call Failed\");\n    }\n\n    modifier onlyOwner{\n        // require(msg.sender == i_owner, \"sender is not owner\");\n        if(msg.sender != i_owner) {revert FundMe__NotOwner();}\n        _;\n    }\n\n    receive() external payable {\n        fund();\n    } \n\n    fallback() external payable {\n        fund();\n    } \n\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\n        // we need the ABI and address\n        //address 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n        (,int256 price,,,) = priceFeed.latestRoundData();\n\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethPriceInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethPriceInUsd;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}